#include <iostream>
#include <vector>
#include <array>
#include <set>
#include <map>
#include <tuple>
#include <numeric>
#include <algorithm>

#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>

#define ASSERT_EQ(a, b) \
   do { __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     if (_a != _b)       \
     {                 \
       std::cout << _a << " != " << _b << std::endl; \
       assert(0);                  \
     }                  \
     }while(0)

#define myprint(arg) do { std::cout << "" #arg << " = " << arg << std::endl; } while(0)

using ll = int64_t;

namespace {

    std::vector<std::string> input_real{
            R"(                                               /---------\                                                                                            )",
            R"(                                               |         |/---------------\                                                                           )",
            R"(        /--------------------------------------+---------++---------------+-----------------------------\                                             )",
            R"(        |                      /---------------+---------++-------------<-+----------------------------\|                                             )",
            R"(   /----+----------------------+------\        |         ||               |                            ||                                             )",
            R"(   |    |                      |      |        |         ||               |                            ||  /-------------------------------------\    )",
            R"(   |    |                      |      |        |         ||               |                            ||  |                                     |    )",
            R"(   |    |    /-----------------+------+--------+---------++---------------+-------\              /-----++--+-------------------------------------+-\  )",
            R"(   |    |    |        /--------+------+--------+---------++-------------\ |       |              |     ||  |                           /---------+\|  )",
            R"(   |    |    |        |        |      |        |         ||        /----+-+-------+--------------+-\  /++--+---------------------------+---------+++\ )",
            R"(   |    |    |    /---+--------+------+--------+-----\   ||      /-+----+-+-------+--------------+-+--+++--+-----------\               |         |||| )",
            R"(   |    |    |    |   |        |      |        |     |   ||      | |    | |       |              | |  |||  |           |               |         |||| )",
            R"(   |    |    |    |  /+--------+------+--------+---\ |   ||      | |    | |       |              | |  |||  |           |               |         |||| )",
            R"(   |    |    |    |  ||        |      |        |   | |   ||      | |    | |       | /------------+-+--+++--+------\    |               |         |||| )",
            R"(   |    |    |/---+--++--------+-----\|        | /-+-+---++------+-+----+-+-----\/+-+------------+-+--+++--+------+----+-\             |         |||| )",
            R"(   |    |   /++---+--++--------+-----++--\     | | | |   ||      | |    | |     |||/+------------+-+--+++--+------+----+-+-------------+---------++++\)",
            R"(   |    |   |||   |  ||  /-----+-----++--+-----+-+-+-+---++-\    | |    | |     |||||         /--+-+--+++--+------+----+-+-------------+------\  |||||)",
            R"(   | /--+---+++---+--++--+-----+-----++--+-----+-+-+-+---++-+----+-+----+-+-----+++++-------\ |  | |  |||  |      |    | |             \-<----+--+/|||)",
            R"(   | |/-+---+++---+--++--+-----+--\  ||  |     | | | |   || |    | |    | |     |||||       | |  \-+--+++--+------+----+-+--------------------+--+-/||)",
            R"(   | || |   |||   |  ||  |     |  |  ||  |     | | | |   ||/+----+-+----+-+-----+++++-------+-+----+--+++--+------+----+-+--------------\     |  |  ||)",
            R"(   | || |   |||   |  ||  |    /+--+--++--+-----+-+-+-+---++++----+-+----+-+-----+++++-------+-+----+--+++--+------+----+\|              |     |  |  ||)",
            R"(   | || |   |||   |  ||  |    ||  |  ||  |     | | | | /-++++----+-+----+-+-----+++++-------+-+----+--+++--+------+----+++----\         |     |  |  ||)",
            R"(   | || |   |||   |  ||/-+----++--+--++--+-----+-+-+-+-+-++++----+-+----+-+----\|||||       | |    |  \++--+------+----+++----+---------+-----+--+--/|)",
            R"(   | || |   |||   \--+++-+----++--+--++--+-----+-+-+-/ | ||||    | |    | |/---++++++-------+-+----+---++--+------+----+++----+--------\|     |  |   |)",
            R"(   | || |   |||      ||| |    ||  |  ||  |     | | |   | |\++----+-+----+-/|   ||||||       | |    |   ||/-+------+\   |||    |        ||     |  |   |)",
            R"(   | || |   |||      ||| |    ||  |  ||  |     | | |   | | || /--+-+----+--+-\ ||||||       | |    |   ||| |      ||   |||    |        ||     |  |   |)",
            R"(   | || | /-+++------+++-+----++\ |  ||  |     | | |   | | || |  | |    | /+-+-++++++-------+-+----+---+++-+------++---+++----+--------++\    |  |   |)",
            R"(   | || | | |||      |\+-+----+++-+--++--+-----+-+-+---+-+-++-+--+-+----/ || | ||||||       | |    |   ||| |      ||   |||    |        |||    |  |   |)",
            R"(   | || | | |||      | | |    ||| |  ||  |     | | |   | | || |  | \------++-+-++++++-------+-+----/   ||| |      ||   |||    |        |||    |  |   |)",
            R"(   | || | | |||    /-+-+-+----+++-+--++--+-----+-+-+---+-+-++\|  |     /--++-+-++++++-------+-+--------+++-+----\ ||   |||    |        |||    |  |   |)",
            R"(   | || | | |||    | | | |    ||| |  ||  |     | | |   | | ||||  |     |  || | ||||||       | |   /----+++-+-\  | ||   |||    |        |||    |  |   |)",
            R"(   | || | | |||  /-+-+-+-+----+++-+--++--+-----+-+-+---+-+-++++--+-----+--++-+-++++++-------+-+---+----+++-+\|  | ||   |||    |        |||    |  |   |)",
            R"(   | || | | ||v  | v | | |    ||| |  ||  |     | | |   | | ||||  |     |  || | ||||||   /---+-+---+----+++-+++--+-++---+++----+-\      |||    |  |   |)",
            R"(   | || | | |||  | | | | |    ||| |  ||  |     | | | /-+-+-++++--+-----+--++-+-++++++---+---+-+---+----+++-+++--+-++---+++----+-+--\   |||    |  |   |)",
            R"(   | || | | |||  | | | | |    ||| |  ||  |     | | | | |/+-++++--+-----+--++-+-++++++---+---+-+---+----+++-+++--+-++---+++----+-+--+---+++----+--+\  |)",
            R"(   | || | | |||  | | | | |    ||| |  ||  |     | \-+-+-+++-++++--+-----+--++-+-+/||||   |   | \---+----+++-+++--+-++---+++----+-+--+---+++----/  ||  |)",
            R"(   | || | | |||  | | | | |    ||| |  ||  |     |   | | ||| |||| /+-----+--++-+-+-++++---+---+-----+----+++-+++--+-++---+++----+-+--+---+++----\  ||  |)",
            R"(   | || | | |||  | | | | |    ||| |  ||  |     |   | | ||| |||| ||    /+--++-+-+-++++---+---+-----+---\||| |||  |/++---+++----+-+--+\  |||    |  ||  |)",
            R"(   | || | | |||  | | | | |    |||/+--++--+\    |   | | ||| |||| ||    ||  || |/+-++++---+---+-----+---++++-+++--++++---+++----+-+--++--+++---\|  ||  |)",
            R"(/--+-++-+-+-+++--+-+-+-+-+----+++++\ ||  ||    |   | | ||| |||| ||    ||  || ||| ||||   | /-+-----+---++++-+++--++++---+++----+-+--++\ |||   ||  ||  |)",
            R"(|  | || | | |||  | | | | |    |||||| || /++----+---+-+-+++-++++-++----++--++-+++-++++---+-+-+-----+---++++-+++\ ||||   |||    | |  ||| |||   ||  ||  |)",
            R"(|  | || | | |||  | | | | |    |||||| || |||  /-+---+-+-+++-++++-++----++--++-+++-++++---+\| |     |   |||\-++++-+++/   |||/---+-+--+++-+++---++\ ||  |)",
            R"(|  | || | | |||  | | | | |    |||||| || |||  | |   | | ||| |||| ||    ||  || ||| ||||   ||| |     |   |||  |||| |||    ||||   | |  ||| |||   ||| ||  |)",
            R"(|  | ||/+-+-+++--+-+-+-+-+----++++++-++-+++\ | |  /+-+-+++-++++-++----++--++-+++-++++---+++-+-----+---+++--++++-+++----++++---+-+--+++-+++-\ ||| ||  |)",
            R"(| /+-++++-+-+++--+-+-+-+-+----++++++-++-++++-+-+--++-+-+++-++++-++---\||  || ||| ||||   ||| |     |   |||  |||| |||    ||||   | |  ||| ||| | ||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| || ||||/+-+--++-+-+++-++++-++---+++--++-+++-++++---+++-+-----+---+++--++++-+++----++++---+-+--+++-+++-+\||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| || |||||| |  || | ||| |||| ||   |||  || ||| ||||   ||| |     |   |||  |||| |||    ||^|   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| || |||||| |  || | |||/++++-++---+++--++-+++-++++--\||| |     |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| ||/++++++-+--++-+-++++++++-++---+++--++-+++-++++--++++-+--\  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| ||||||||| |  || | |||||||| ||   |||  || ||| ||||  |||| |  |  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| ||||||||| |  || | |||||||| ||   |||  || ||| ||||  |||| |  |  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| ||||||||| |  || | |||||||| ||   |||  || ||| ||||  |||| |  |  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | |||  | | | | |    |||||| ||||||||| |  || | |||||||| ||   |||  || ||| ||||  |||| |  |  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||\--+-+-+-+-+----++++++-/|||||||| |  || | |||||||| ||   |||  || ||| ||||  |||| |  |  |   |||  |||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||   | | | | |    ||||||  |||||||| | /++-+-++++++++-++---+++--++-+++-++++--++++-+--+--+---+++-\|||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||   | | | \-+----++++++--++++++++-+-+++-+-++++++++-++---+++--++-++/ ||||  |||| |  |  |   ||| ||||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||   | | |   |    ||||||  |||||||| | ||| | |||||||| || /-+++--++-++--++++--++++-+--+-\|   ||| ||||| |||    ||||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||   | | |   |    \+++++--++++++++-+-+++-+-++++++++-++-+-+++--++-++--++++--++++-+--+-++---+++-+++++-+++----+/||   | |  ||| ||| ||||| ||  |)",
            R"(| || |||| | ||/--+-+-+---+\    |||||  |||||||| \-+++-+-++/||||| || | |||  || ||  ||||  |||| |  | ||   ||| ||||| |||    | |\---+-+--+++-+++-++++/ ||  |)",
            R"(| || |||| | |||  | | |   v|    |||||  ||||||||   ||| | || ||||| ||/+-+++--++-++--++++--++++-+--+-++--\||| ||||| |||    | |    | |  ||| ||| ||||  ||  |)",
            R"(|/++-++++-+-+++--+-+-+---++----+++++--++++++++---+++-+-++-+++++-++++-+++--++-++--++++--++++-+--+-++--++++\||||| |||    | |    | |  ||| ||| ||||  ||  |)",
            R"(|||| |||| | |||  | | |   ||    |||||  |^||||||   |||/+-++-+++++-++++\|||  |\-++--++++--++++-+--+-++--++++++++++-+++----+-+----+-+--+++-/|| ||||  ||  |)",
            R"(|||| |||| | |||  | | |/--++----+++++--++++++++---+++++-++-+++++-++++++++--+--++--++++--++++-+--+-++--++++++++++-+++----+\|    | |  |||  || ||||  ||  |)",
            R"(|||| |||| | |||  |/+-++--++-\  |||||  ||||||||   ||||| \+-+++++-++++++++--+--++--++++--++++-+--+-++--++++++++++-+++----+++----/ |  |||  || ||||  ||  |)",
            R"(|||| |||| | |||  ||| ||  || |  |||||/-++++++++---+++++--+-+++++-++++++++--+--++>-++++--++++-+--+-++-\|||||||||| |||    |||      |  |||  || ||||  ||  |)",
            R"(|||| |||| | |||  ||| ||  || |  |||||| ||||||||   |||||  | ||||| ||||||||  |  ||  ||||  |||| |  | || ||||||||||| |||   /+++------+--+++--++-++++-\||  |)",
            R"(|v|| |||| | |||  ||| ||  || |  |||||| ||||||||   |||||  | ||||| ||||||||  |  ||  ||||  |||| |  | || ||||||||||| |||   ||||      |  |||  || |||| |||  |)",
            R"(|||\-++++-+-+++--+++-++--++-+--++++++-/|||||||   |||||  | |||||/++++++++--+--++--++++-\|||| |  | || ||||||||||| |||   ||||      |  |||  || |||| |||  |)",
            R"(|||  |||| | |||/-+++-++--++-+--++++++--+++++++---+++++-\| ||||||||||||||  |  ||  |||| ||||| |  | || |||||||\+++-+++---++++------+--+++--++-++++-+/|  |)",
            R"(|||  |||| | |||| ||| ||  \+-+--++++++--+++++++---+++++-++-++/|||||||||||  | /++--++++-+++++-+--+-++-+++++++-+++-+++---++++-----\|  |||  || |||| | |  |)",
            R"(|||  |||| | |||| ||| ||   | |  ||||||  |||||||   ||||| || || |||||||||||  | |||  |||| ||||| |  | ||/+++++++-+++-+++--\||||     ||  |||  || |||| | |  |)",
            R"(||| /++++-+-++++-+++\||   | |  \+++++--+++++++---+++++-++-++-+++++++++++--+-+++--++++-+++++-+--+-++++++/||| ||| |||  |||||  /--++--+++\ || |||| | |  |)",
            R"(||| ||||| \-++++-++++++---+-+---/||||  |||||||   ||||| || || |||||||v|||  | |||  |||| ||||| |  | |\++++-+++-+/| |||  |||||  |  ||  |||| || |||| | |  |)",
            R"(|\+-+++++---++++-++++++---+-+----++++--+++++++---+++++-++-++-+++++++++++--+-+++--++++-+++++-+--+-+-++++-+/| | | |||  |||||  |  ||  |||| || |||| | |  |)",
            R"(| | |||||   |||| ||||||   | |    ||||  |||||||   ||||| || || |||||||||||  | |||  \+++-+++++-+--+-+-++++-+-+-+-+-+++--++++/  |  ||  |||| || |||| | |  |)",
            R"(| | |||||   |||| ||||||   | |    ||||  |||||||   ||||| || || |||||||||||  | |||   |||/+++++-+--+-+-++++-+-+-+-+-+++--++++---+--++\ |||| || |||| | |  |)",
            R"(| | |||||   |||| ||||||   | |    ||||  |||||\+---+++++-++-++-+++++++++++--+-+++---+++++++++-+--+-+-++++-+-+-+-+-+++--++++---+--+++-++++-++-+/|| | |  |)",
            R"(| | |||||   |||| ||||||   | |/---++++--+++++-+---+++++-++-++-+++++++++++--+-+++---+++++++++-+--+-+-++++-+-+-+-+-+++--++++---+\ ||| |||| || | || | |  |)",
            R"(| | |||||   |||| ||||||   | ||/--++++--+++++-+---+++++-++-++-+++++++++++--+-+++-\ ||||||||| |  | | |||| | | | | |\+--++++---++-+++-+/|| || | || | |  |)",
            R"(| | |||||   |||| ||||||   | |||  ||||  ||||| |   ||||| || || |||||||||||  | ||| | ||||||\++-+--+-+-++++-+-+-+-+-+-+--++++---++-+/| | || || | || | |  |)",
            R"(| | |||||   |||| ||||||   | |||  ||||  ||||| |   ||||| || || |||||||||||  | ||| | |^|||| |\-+--+-+-++++-+-+-+-+-+-+--++++---++-+-+-+-/| || | || | |  |)",
            R"(| | |||||   |||| ||||||   | |||  ||||  ||||| |   ||||| || || ||||||||||| /+-+++-+-++++++-+--+--+-+-++++-+-+-+-+-+-+--++++---++-+-+-+--+-++-+-++-+\|  |)",
            R"(| | |||||   |\++-++++++---+-+++--++++--+++++-+---+++++-++-++-+++++++++++-++-+++-+-/||||| |  |  | | |||| | | | | | |  ||||   || | | |  | || | || |||  |)",
            R"(| | |||||   | || ||||||   | |||  ||||  ||||| |   ||||| || || ||||||||||| || ||| |  ||||| |  |  | | |||| | | | | | |  ||||   \+-+-+-+--/ || | || |||  |)",
            R"(| | \++++---+-++-+++/||   | |||  ||||  ||||| |   ||||| || || ||||||||||| || ||| |  ||||| |  |  | | |||| | | | | | |  ||||    | | | |    || | || |||  |)",
            R"(| |  ||||   | || ||| ||   | |||  ||||  ||||| |   ||||| || ||/+++++++++++-++-+++-+--+++++-+--+--+-+-++++-+-+-+-+-+-+--++++----+\| | |    || | || |||  |)",
            R"(| | /++++---+-++-+++\||/--+-+++--++++--+++++-+---+++++-++\||||||||||||\+-++-+++-+--+++++-+--+--+-+-+++/ | | | | | |  ||||    ||| | |    || | || |||  |)",
            R"(| | |||||   | || ||||||| /+-+++--++++--+++++-+---+++++-+++++++++++++++-+-++-+++-+\ ||||| |  |  | | |||  | | | | | |  ||||    ||| | |    || | || |||  |)",
            R"(|/+-+++++--\| || |||||||/++-+++--++++-\||||| |   ||||| ||||||||||||||| | || ||| || \++++-+--+--+-+-+++--+-+-+-+-+-+--++++----+++-+-+----++-+-++-+++--/)",
            R"(||| ||||\--++-++-++++++++++-+++--++++-++++++-+---+++++-+++++++++++++++-+-++-+++-++--++++-+--+--+-+-+++--/ | | | | |  |\++----+++-+-+----++-+-++-/||   )",
            R"(||| ||||   || || ||||\+++++-+++--++++-++++++-+---++/|| ||||||||||||||| | || ||| ||  |||| |  |  | | |||    | | | | |  | ||    ||| | |    || | ||  ||   )",
            R"(||| ||||   || || |||| ||||| |||  |||| |||||| |   || || ||||||||||||||| | || ||| ||  |||| |  |  | | |||    | | | | |  | ||   /+++-+-+---\|| | ||  ||   )",
            R"(||| ||||   || || |||| ||||| |||  ||||/++++++-+---++-++-+++++++++++++++-+-++-+++-++--++++-+--+--+-+-+++----+-+-+-+-+--+-++->-++++\| |   ||| | ||  ||   )",
            R"(||| ||||   || || |||| ||||| |||  ||||||||||| |   ||/++-+++++++++++++++-+-++-+++-++--++++-+--+--+-+-+++----+-+-+-+-+--+-++---++++++-+---+++-+-++--++-\ )",
            R"(||| ||||   || || |||| ||||| |||  ||||||||||| |   ||||| |||||\+++++++++-+-++-+++-++--++++-+--+--+-+-+++----+-+-+-+-+--+-++---++/||| |   ||| | ||  || | )",
            R"(||| ||||   || || |||| ||||| |||  ||||||||||| |   ||||\-+++++-+++++++++-+-++-+++-++--++++-+--+--+-+-+++----+-+-+-+-+--+-++---++-+++-/   ||| | ||  || | )",
            R"(||| ||||   || || |||| ||||| |||  \++++++++/| |   ||||  ||||| ||||||||| | ||/+++-++--++++-+--+-\| | |||    | | | | |  | ||/--++-+++---\ ||| | ||  || | )",
            R"(||| ||\+---++-++-++++-+++++-+++---/||||||| | |   ||||  ||||| ||||||||| | |||||| ||  |||| |  | || | |||    | | | | |  | |||  || |||   | ||| v ||  || | )",
            R"(||| |\-+---++-++-++++-+++++-+++----+++++++-+-+---++++--+++++-+++++++++-+-++++++-++--++++-+--/ || | |||    | | | | |  | |||  || |||   | ||| | ||  || | )",
            R"(||| |  |   || || |v|| ||||| |||    ||||||| | |   ||||  ||||| ||||||||| | \+++++-++--++++-+----++-+-+++----+-+-+-+-+--+-+++--++-+++---+-+++-+-++--/| | )",
            R"(||| |  |   || || |||| ||||| |||    ||||||| | |   ||||  ||||| ||||\++++-+--+++++-++--++++-+----++-+-+++----+-+-+-+-+--+-/||  || |||   | ||| | ||   | | )",
            R"(||| \--+---++-++-+++/ ||||| |||    ||||||| | |   ||||  |||\+-++++-++++-+--+++++-++--+++/ |    || | |||    | | | | |  |  ||  || |||   | ||| | ||   | | )",
            R"(|||    |   || || |||  |||\+-+++----+++++++-+-+---++++--+++-+-++++-++++-+--+++++-+/ /+++--+----++-+-+++----+-+-+-+-+--+--++--++-+++---+-+++-+\||   | | )",
            R"(|||    | /-++-++-+++--+++-+-+++----+++++++-+-+---++++--+++-+-++++-++++-+--+++++-+--++++--+----++-+-+++----+-+-+\| |  |  ||  || |||   | ||| ||||   | | )",
            R"(|||    | | || || |||  ||| | |||    ||||||| | \---++++--+++-+-++++-++++-+--+++++-+--++++--/    || | |||    | | ||| |  |  ||  || |||   | ||| ||||   | | )",
            R"(|||    | | || || |||  ||| | v||/---+++++++-+-----++++-\||| | |||| |||| |  ||||\-+--++++-------++-+-+++----+-+-+++-+--+--++--++-+++---+-+++-++/|   | | )",
            R"(|||    | | |\-++-+++--+++-+-++++---++++++/ |     |||| |||| | |\++-++++-+--+++/  |/-++++-------++-+-+++----+-+-+++-+--+-\||  || |||   | ||| || |   | | )",
            R"(|||    | | |  || |||  ||| | ||\+---++++++--+-----++++-++++-+-+-++-++++-+--+++---/| ||||       || |/+++--->+-+-+++-+--+-+++--++\|||   | ||| || |   | | )",
            R"(|||    | | |  || |||  ||| | || |   ||||||  |     |||| |||| | | || |||| |  |||    | ||||       || |||^|  /-+-+-+++-+--+-+++--++++++---+-+++-++-+---+\| )",
            R"(|||    | | |  || |||  ||| | || |   ||||||  |     |||| ||\+-+-+-++-++++-+--+++----+-++++-------++-+++++--+-+-+-+++-+--+-+++--++++++---+-+++-++-+---/|| )",
            R"(|||    | | |  || |||  ||| | || |   |||||\--+-----++++-++-+-+-+-++-++++-+--+++----+-++++-------++-+++++--+-+-+-/|| |  | |||  ||||||   | ||| || |    || )",
            R"(|||    | | |  || |||  ||| | || |   |||||   |     \+++-++-+-+-+-++-++++-+--+++----+-++++-------++-+++++--+-/ |  || |  | |||  ||||||/--+-+++-++-+-\  || )",
            R"(|||    | | |  || |||  ||| | || |   |||||   |      ||| || | | | || |||| \--+++----+-++++-------++-+++++--+---+--+/ |  | |||  |||||||  | ||| || | |  || )",
            R"(|||    |/+-+--++-+++--+++-+-++-+---+++++--\|      ||| || | | | || ||||    |||    | |\++-------++-+++++--+---+--+--/  | |||  |||||||  | ||| || | |  || )",
            R"(|||    ||| |  || |||  ||| | || |   |||||  ||      ||| || | | | || \+++----+++----+-+-++-------++-++++/  |   |  |     | |||  |||||||  | ||| || | |  || )",
            R"(|||    ||| |  ||/+++--+++-+-++-+---+++++--++------+++-++-+-+-+-++--+++----+++----+-+-++-------++-++++---+---+--+-----+\|||  \++++++--+-/|| || | |  || )",
            R"(|||    ||| |  ||||||  ||| | || |   |||||  ||      |\+-++-+-+-+-++--+++----+++----+-+-++-------++-++++---+---+--+-----+++++---++++++--+--++-++-+-+--+/ )",
            R"(|||    ||| |  ||||||  ||| | || |   |||||  ||      | | || | | | ||  |||    \++----+-+-++-------++-++++---+---+--+-----+++++---++++++--+--+/ || | |  |  )",
            R"(|||    ||| |  ||||||  ||| | || \---+++++--++------+-+-/| | | | ||  |||     ||    | | ||       || ||||   |   |  |     |||||   ||||||  |  |  || | |  |  )",
            R"(|||    ||| |  |||||\--+++-+-++-----+++++--++------+-+--+-+-+-/ ||  |||     ||    | | \+-------++-++++---+---+--+-----+++++---++++/|  |  |  || | |  |  )",
            R"(|||    ||| |  |||||  /+++-+-++-----+++++--++------+-+--+-+-+---++--+++-----++----+-+--+----\  || ||||   |   |  |     |||||   |||| |  |  |  || | |  |  )",
            R"(|||    ||| |/-+++++--++++-+-++-----+++++--++------+-+--+-+-+---++--+++----\||    | |  |    |  || ||||   |   |  |     |||||   |||| |  |  |  || | |  |  )",
            R"(||\----+++-++-+++++--++++-+-++-----+++++--++------+-+--+-+-+---++--++/    |||    | |  |    |  || ||||   |   |  |     |||||   |||| |  |  |  || | |  |  )",
            R"(||     |||/++-+++++--++++-+-++-\   |||||  ||      | |  | | \---++--++-----+++----+-+--+----+--++-++++---+---+--+-----+++++---++++-+--+--/  || | |  |  )",
            R"(||     |||||| |||||  |||| | || |   |||||  ||      \-+--+-+-----++--++-----+++----+-+--+----+--++-++++---+---+--+-----+++++---++++-+--+-----/| | |  |  )",
            R"(||     |||||| |||||  |||| | || |   |||||  ||        |  | |     ||  ||     |||    | |  |    |  || ||||   |   |  |     |||||   |||| |  |      | | |  |  )",
            R"(||     |||||| |||||  |||| | || |   ||\++--++--------+--+-+-----++--++-----+++----+-+--+----+--++-++++---+---+--+-----+++++---+++/ |  |      | | |  |  )",
            R"(||     ||\+++-+++++--++++-+-++-+---++-++--++--------+--+-+-----++--++-----+++----+-+--+----+--++-++++---+---+--/     |||||   |||  |  |      | | |  |  )",
            R"(||     || ||| |||\+--++++-+-++-+---++-++--++--------+--+-+-----++--++-----+++----+-+--+----+--++-++++---+---/        |||||   |||  |  |      | | |  |  )",
            R"(|\-----++-+/| ||| |  |||| | || |   || ||  ||        |  | |     ||  ||  /--+++----+-+--+----+\ || ||||   \------------+++++---+++--+--+------+-+-+--/  )",
            R"(|      || | | ||| \--++++-+-/| |   || ||  ||        |  | |     ||  ||  |  |||    | \--+----++-++-++++----------------+++++---+++--+--+------/ | |     )",
            R"(|      || | | |\+----++++-+--+-+---++-++--++--------+--/ |     ||  ||  |  ||\----+----+----++-++-++++----------------+++++---++/  |  |        | |     )",
            R"(|      || | | | |    |||| |  | |   |\-++--++--------+----+-----++--++--+--++-----+----+----++-++-+++/                |||||   ||   |  |        | |     )",
            R"(|      || | | | |    |||\-+--+-+---+--/|  ||        |    |     ||  ||  |  ||     |    |    || || ||\-----------------/||||   ||   |  |        | |     )",
            R"(|      || | | \-+----+++--/  | |   |   |  ||        |    |     ||  ||  |  ||     |    |    || || ||                   ||||   ||   |  |        | |     )",
            R"(|      || \-+---+----+++-----+-/   |   |  ||        |    |     \+--++--+--++-----+----/    || || ||                   ||||   ||   |  |        | |     )",
            R"(|      |\---+---+----+++-----+-----+---+--/|        |    |      \--++--+--++-----+---------++-++-++-------------------++++---++---+--+--------/ |     )",
            R"(|      |    |   |    |\+-----+-----+---+---+--------+----+---------++--+--++-----+---------++-++-++-------------------++/\---++---+--/          |     )",
            R"(|      |    |   |    \-+-----+-----+---+---+--------+----+---------++--+--++-----+---------/| || ||                   ||     ||   |             |     )",
            R"(|      |    |   |      |     |     |   |   |        |    |         ||  |  ||     |          | || ||                   ||     ||   |             |     )",
            R"(\------+----+---+------+-----+-----/   |   |        |    |         ||  |  ||     \----------+-++-++-------------------+/     ||   |             |     )",
            R"(       |    |   |      |     \---------+---+--------+----+---------++--+--++----------------+-++-++-------------------+------/|   |             |     )",
            R"(       |    |   |      \---------------+---+--------+----/         ||  |  ||                | || ||                   |       |   |             |     )",
            R"(       |    |   |                      |   |        |              ||  |  |\----------------+-/| ||                   |       |   |             |     )",
            R"(       |    |   |                      |   |        \--------------+/  \--+-----------------/  | ||                   |       |   \-------------/     )",
            R"(       |    |   |                      |   |                       \------+--------------------+-/|                   |       |                       )",
            R"(       |    |   |                      \---+------------------------------+--------------------/  |                   |       |                       )",
            R"(       \----+---+--------------------------/                              |                       \-------------------+-------/                       )",
            R"(            \---+---------------------------------------------------------/                                           |                               )",
            R"(                \-----------------------------------------------------------------------------------------------------/                               )",
    };

    decltype(input_real) input_test{
            R"(/->-\        )",
            R"(|   |  /----\)",
            R"(| /-+--+-\  |)",
            R"(| | |  | v  |)",
            R"(\-+-/  \-+--/)",
            R"(  \------/   )",

    };

    decltype(input_real) input_test2{
            R"(/>-<\  )",
            R"(|   |  )",
            R"(| /<+-\)",
            R"(| | | v)",
            R"(\>+</ |)",
            R"(  |   ^)",
            R"(  \<->/)",

    };
//    auto &input = input_test2;
    auto &input = input_real;

    enum class Turn {
        left = 0, straight = 1, right = 2, LAST = 3
    };
    enum class Orientation {
        forward = '>', backward = '<', up = '^', down = 'v'
    };

    struct Cart {
        std::tuple<ll, ll> initial_pos;
        std::tuple<ll, ll> current_pos;
        Turn next_turn;
        Orientation orientation;
        bool crashed = false;

        std::tuple<ll, ll> getNextPosition() {
            auto [x, y] = current_pos;
            switch (orientation) {
                case Orientation::forward:
                    return {x + 1, y};
                case Orientation::backward:
                    return {x - 1, y};
                case Orientation::up:
                    return {x, y - 1};
                case Orientation::down:
                    return {x, y + 1};
            }
        }

        Orientation turn() {
            auto current_turn = next_turn;
            next_turn = Turn(((ll) next_turn + 1) % (ll) Turn::LAST);
            switch (orientation) {
                case Orientation::forward:
                    switch (current_turn) {
                        case Turn::straight:
                            return Orientation::forward;
                        case Turn::left:
                            return Orientation::up;
                        case Turn::right:
                            return Orientation::down;
                    }
                case Orientation::backward:
                    switch (current_turn) {
                        case Turn::straight:
                            return Orientation::backward;
                        case Turn::left:
                            return Orientation::down;
                        case Turn::right:
                            return Orientation::up;
                    }
                case Orientation::up:
                    switch (current_turn) {
                        case Turn::straight:
                            return Orientation::up;
                        case Turn::left:
                            return Orientation::backward;
                        case Turn::right:
                            return Orientation::forward;
                    }
                case Orientation::down:
                    switch (current_turn) {
                        case Turn::straight:
                            return Orientation::down;
                        case Turn::left:
                            return Orientation::forward;
                        case Turn::right:
                            return Orientation::backward;
                    }
            }
            assert(false && "Unhandled turn");
        }

        Orientation processNextTile(char tile) {
            switch (orientation) {
                case Orientation::forward:
                    switch (tile) {
                        case '.':
                            return Orientation::forward;
                        case '\\':
                            return Orientation::down;
                        case '/':
                            return Orientation::up;
                        case '+':
                            return turn();
                        default:
                            assert(false && "Unacceptable tile for >");
                    }
                case Orientation::backward:
                    switch (tile) {
                        case '.':
                            return Orientation::backward;
                        case '\\':
                            return Orientation::up;
                        case '/':
                            return Orientation::down;
                        case '+':
                            return turn();
                        default:
                            assert(false && "Unacceptable tile for <");
                    }
                case Orientation::up:
                    switch (tile) {
                        case '.':
                            return Orientation::up;
                        case '\\':
                            return Orientation::backward;
                        case '/':
                            return Orientation::forward;
                        case '+':
                            return turn();
                        default:
                            assert(false && "Unacceptable tile for ^");
                    }
                case Orientation::down:
                    switch (tile) {
                        case '.':
                            return Orientation::down;
                        case '\\':
                            return Orientation::forward;
                        case '/':
                            return Orientation::backward;
                        case '+':
                            return turn();
                        default:
                            assert(false && "Unacceptable tile for v");
                    }
            }
        }
    };
}

int main13() {
    int64_t result0 = 0;
    int64_t result1 = 0;

    std::vector<Cart> carts;
    for (ll y = 0; y < input.size(); y++) {
        for (ll x = 0; x < input.at(y).size(); x++) {
            char &c = input.at(y).at(x);
            if (c == (char) Orientation::forward || c == (char) Orientation::backward || c == (char) Orientation::up ||
                c == (char) Orientation::down) {
                Cart cart;
                cart.initial_pos = {x, y};
                cart.current_pos = {x, y};
                cart.next_turn = Turn::left;
                cart.orientation = (Orientation) c;
                carts.push_back(cart);
                c = '.';
            } else if (c == '-' || c == '|') {
                c = '.';
            }
        }
    }

    auto current_map = input;
    do {
        std::sort(carts.begin(), carts.end(), [](auto &first, auto &second) {
            auto [first_x, first_y] = first.current_pos;
            auto [second_x, second_y] = second.current_pos;
            return std::tie(first_y, first_x) < std::tie(second_y, second_x);
        });

        for (auto &cart: carts) {
            auto [current_x, current_y] = cart.current_pos;
            auto [next_x, next_y] = cart.getNextPosition();
            assert(next_y < current_map.size());
            assert(next_y >= 0);
            assert(next_x < current_map.at(next_y).size());
            assert(next_x >= 0);

            auto c = current_map.at(next_y).at(next_x);
            if (c == (char) Orientation::forward || c == (char) Orientation::backward || c == (char) Orientation::up ||
                c == (char) Orientation::down) {
                std::cout << "Crash at " << next_x << "," << next_y << std::endl;
                cart.crashed = true;
                for (auto &maybe_crashed_cart: carts) {
                    if (maybe_crashed_cart.current_pos == std::tuple<ll, ll>{next_x, next_y}) {
                        maybe_crashed_cart.crashed = true;
                    }
                }
                c = input.at(next_y).at(next_x);
            }
            auto next_orientation = cart.processNextTile(c);
            current_map.at(current_y).at(current_x) = input.at(current_y).at(current_x);
            current_map.at(next_y).at(next_x) = (char) next_orientation;

            cart.orientation = next_orientation;
            cart.current_pos = {next_x, next_y};
        }

        for (auto it = carts.begin(); it != carts.end();) {
            if (it->crashed) {
                auto [current_x, current_y] = it->current_pos;
                current_map.at(current_y).at(current_x) = input.at(current_y).at(current_x);
                it = carts.erase(it);
            } else {
                ++it;
            }
        }

        if (carts.size() == 1) {
            auto [last_x, last_y] = carts.front().current_pos;
            std::cout << "Last position at " << last_x << "," << last_y << std::endl;
            return 0;
        }
    } while (true);


    myprint(result0);
    myprint(result1);
    return 0;
}
